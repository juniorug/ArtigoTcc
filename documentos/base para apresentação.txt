===================================================Pagina 1===================================================
An Extendable Python Library To Manipulate Sensors Coupled To The Raspberry Pi

Aluno: Edivaldo Mascarenhas F. de Jesus Júnior
Professor Orientador:  Manoel Neto
Professor da Disciplina:  Manoel Neto
Curso: Análise e Desenvolvimento de Sistemas

===================================================Pagina 2===================================================
Apresentação do Trabalho

Introdução
Motivação e Justificativa do Trabalho
Objetivos do Trabalho
Computação ubíqua e a Internet das Coisas 
Hardware e Software
LibsensorPy
Java e RTOS
Estudo de Caso
Conclusões e Trabalhos Futuros
Referências

===================================================Pagina 3===================================================
Introdução


Esse trabalho apresenta o desenvolvimento da biblioteca libsebsorPy, 
uma biblioteca extensível, que permite o usuário interagir com o ambiente através dos sensores e atuadores acoplados ao Raspberry Pi, bem como adicionar novos sensores/atuadores de forma fácil e prática. 


===================================================Pagina 4===================================================
Motivação e Justificativa do Trabalho

Necessidade de conhecimento técnico sobre o funcionamento dos sensores/atuadores: Configurações do software para acoplamento com o sensor/atuador e manipulação dos dados não legíveis para obtençao da informaçao.

Ex: 0011 0101 0000 0000 0001 1000 0000 0000 0100 1101   == Humidity: 53%/ Temperature：24℃   (usar a imagem da conversão)
fonte:http://akizukidenshi.com/download/ds/aosong/DHT11.pdf

Em outras plataformas, como no Arduino, as APIs oferecem bibliotecas que encapsulam a complexidade de implementação e oferecem apenas a interface para o uso.  Essas bibliotecas ainda não existem formalmente para quem quer usar Python (Aplicado ao Raspberry PI) como linguagem de desenvolvimento. 

===================================================Pagina 5===================================================
Objetivos do Trabalho

Este projeto tem como objetivo principal definir, implementar e validar uma biblioteca extensível para Sensores/Atuadores denominada libsensorPy, utilizando o módulo raspberry-GPIO-python, Provendo as abstrações dos principais recursos necessários para o processamentoe as conversões entre as unidades de medida, facilitando e universalizando o uso da biblioteca.


===================================================Pagina 6===================================================
Computação ubíqua e a Internet das Coisas


===================================================Pagina 7===================================================
Computação Móvel
capacidade de um usuário carregar/mover (fisicamente) serviços computacionais para onde quer que ele se mova.
Limitação conceitual: o modelo computacional utilizado na maioria das aplicações não muda enquanto os usuários se movem.

===================================================Pagina 8===================================================
Computação Pervasiva
o computador está embarcado no ambiente de forma invisível para o usuário
i) obter informação do ambiente no qual ele está embarcado
ii) utilizá-la para construir, dinamicamente, modelos computacionais

===================================================Pagina 9===================================================
Computação ubíqua

A UbiComp, em seus vários desdobramentos e aplicações, é considerada por muitos como o novo paradigma da Computação para o século XXI.
# estuda o acoplamento do mundo físico ao mundo da informação
fornece uma abundancia de serviços e aplicações, permitindo que usuários, máquinas, dados e objetos do espaço físico interajam de forma
transparente


===================================================Pagina 10===================================================
Computação ubíqua

definida como uma área da computação posicionada entre a Computação Móvel e a Computação Pervasiva ;
surge da necessidade de se integrar mobilidade com a funcionalidade da computação pervasiva.

===================================================Pagina 11===================================================
Internet das Coisas

revolução tecnológica que tem como objetivo conectar os itens usados do dia a dia à rede mundial de computadores.
questões técnicas: protocolos de roteamento, consultas semânticas
problemas técnicos e sociais: segurança, privacidade, usabilidade


===================================================Pagina 12 ===================================================
Internet das Coisas
aplicações potencialmente diversas:
Vigilância da saúde ambiental e pessoal;
Monitoramento e controle de processos industriais;
Agricultura;
Espaços e cidades inteligentes.


===================================================Pagina 13===================================================
Hardware


===================================================Pagina 14===================================================
Hardware
requisito fundamental para o desenvolvimento sistemas ubíquos
sensores, microcontroladores, dispositivos de comunicação (placas de rede, bluetooth, etc.)dispositivos de armazenamento etc

===================================================Pagina 15===================================================
Sensores e Atuadores


Sensores 
Dispositivos que permitem capturar informações do ambiente no qual eles estão inseridos
Exemplo: temperatura, pressão;

Atuadores 
É um transdutor que transforma uma forma de energia em outra. 
Exemplo: transformar um sinal elétrico em uma grandeza física (movimento, magnetismo)

===================================================Pagina 16===================================================
Arduino

"plataforma de computação física open-source baseada numa simples placa com pinos de entrada/saída que implementa a linguagem Processing"
- Massimo Banzi
placa constituída por um microcontrolado que populariza o conceito de hardware livre
capaz de construir dispositivos eletrônicos e sistemas interessantes;
Objetivo inicial: utilizada como ferramenta de aprendizagem de eletrônica e programação
===================================================Pagina 17===================================================
Raspberry Pi

Computadordo tamanho de um cartão de crédito  e de baixo custo
utilizado em projetos eletrônicos,
ferramenta de aprendizagem de eletrônica e programação
reaproximar crianças e jovens da programação 
estimular a criação de projetos além da tecnologia criada e consumida pelo mercado
interação com o mundo externo através do acoplamento de sensores

===================================================Pagina 18===================================================
LibsensorPy

O projeto LibsensorPy fornece uma camada de abstração simples entre a aplicação do usuário e o hardware, permitindo a troca de qualquer sensor equivalente com apenas a alteração de uma ou duas linhas de código no projeto que usa a biblioteca. 

Permite que o usuário se concentre na lógica de negócio e nos dados, ao invés entender o que os números brutos do sensor realmente significam

Abstrai conversões de medida, provendo unidades de medidas padrão e outras unidades mais utilizadas.

Foco na usabilidade

Contribuir com a comunidade de software livre e a crescente comunidade de desenvolvedores para o Raspberry Pi
===================================================Pagina ===================================================
Requisitos funcionais

Coletar dados emitidos pelos sensores via pinos do GPIO;
Manipular dados de entrada, transformando-os em dados legíveis ao usuário;
Permitir adições de novos sensores/atuadores e fábricas via herança;
Permitir que o usuário configure o(s) pino(s) a ser(em) utilizado(s) para conexão entre sensor e Raspberry;
Permitir a criação de sensores composite, permitindo que um mesmo sensor meça mais de uma grandeza;
Permitir a configuração de um conjunto de condições (eventos) que, quando satisfeitas, desencadeam uma ação.

===================================================Pagina ===================================================
Requisitos não-funcionais

A biblioteca deve permitir a adição de novos sensores/atuadores/eventos e famílias, relatando dados fiéis aos apresentados no ambiente;
A biblioteca será desenvolvida utilizando a linguagem Python e deverá ser utilizável em qualquer modelo Raspberry Pi;

===================================================Pagina ===================================================
LibsensorPy
Diagrama de classes



===================================================Pagina ===================================================
LibsensorPy
Diagrama de casos de uso

===================================================Pagina ===================================================
LibsensorPy
Diagrama de sequencia


===================================================Pagina ===================================================
Arquitetura da LibsensorPy
- visão arquitetural

===================================================Pagina ===================================================
Arquitetura da LibsensorPy
Estilo arquitetural híbrido:
Tradicional, influenciado por linguagem de programação: Object-Oriented;
Baseados em Invocação Implícita: event based;
Estilo em camadas: virtual Machine.


===================================================Pagina ===================================================
Arquitetura da LibsensorPy
Padrão arquitetural: Sense/Compute/Control


===================================================Pagina ===================================================
Arquitetura da LibsensorPy

O sistema consiste em um módulo que implementa o padrão de Abstract Factory, garantindo a independência de como os produtos são criados, compostos e representados. Para isso, o sistema deve ser configurado com uma das várias famílias de produtos (família de sensores). 
Ela fornece bum conjunto de produtos: sensores, atuadores e eventos relacionados com a família de cada sensor, sendo reveladas apenas suas interfaces, não suas implementações.
===================================================Pagina ===================================================
Principais componentes:

# AbstractSensorFactory: declara uma interface para operações que criam Sensores e eventos abstratos;
# ConcreteFactories: implementam as operações para criar Sensores e eventos concretos;
# AbstractSensor: declara uma interface para os sensores;
# AbstractActuator: declara uma interface para os atuadores;
# AbstractEvent: declara uma interface para os eventos;
# ConcreteSensors, ConcreteActuators, ConcreteEvents: definem os objetos concretos a serem criado pela fábrica concreta correspondente e implementam as interfaces AbstractSensor, AbstractActuator e AbstractEvent respectivamente.


===================================================Pagina ===================================================
sensores Composite 

Devido a alguns sensores pertencerem a mais de uma família (medirem mais de uma grandeza física), A biblioteca permite a utilização de sensores do tipo Composite, compostos por sensores básicos. Essa aptidão é facilitada pela característica do Python permitir herança múltipla.

A idéia da separação entre sensores básicos e Composite é permitir a criação de objetos mais leves, caso o usuário queira apenas um sensor que mede apenas uma grandeza física. 

A estrutura do padrão Composite permite que sensores básicos e sensores Composite sejam vistos da mesma maneira pelo usuário

<diagrama do composite>

===================================================Pagina ===================================================
Como extender a biblioteca

o padrão Abstract Factory, da forma como foi implementada nessa solução permite a extensão da biblioteca facilmente, seguindo O princípio do aberto/fechado permitindo que a biblioteca seja fácil de modificar, e que não sofra com o impacto dessas modificações. 

===================================================Pagina ===================================================
Adicionando novos sensores:

implementar a classe do sensor;
criar uma fábrica concreta que herda da fabrica referente a família do sensor a ser adicionado;
e sobrescrever o método createSensor().

===================================================Pagina ===================================================
adicionar uma nova família de sensores:

criar uma nova fábrica que implementa os métodos abstratos da interface AbstractSensorFactory.

Caso desejado, pode-se criar também uma classe abstrata de sensor para essa família, caso não exista na biblioteca, criando um "contrato", onde são especificados os atributos, métodos e funções que as classes de sensores concretos dessa família são obrigadas a implementar.

<adicionar exemplos do hc-sr04>
===================================================Pagina ===================================================
Java e RTOS - Por que não utilizar java

Inicio do projeto: Java como linguagem de desenvolvimento.

bibliotecas ainda não existem formalmente usando Java 

consequência da recente aprovação do uso de Java para Raspberry.

Biblioteca não capturava os dados enviados pelos sensores.

===================================================Pagina ===================================================
Java e RTOS - Por que não utilizar java

Depois de algumas pesquisas sobre o que poderia ser o problema, descobrimos que não podemos assumir que a invocação do sleep irá suspender a thread precisamente o período de tempo especificado, uma vez que Thread.sleep() e Thread.Join () são métodos dependentes do sistema operacional e da versão do JVM.

Alguns sensores precisam esperar microssegundos entre enviar um sinal para o sensor e receber de volta os dados lidos;
Por causa dessa propriedade não tempo real do Java, nós não conseguimos ler os dados desses sensores. 

===================================================Pagina ===================================================
Estudo de caso

o estudo de caso iniciou-se com testes de verificação de software que consistiu em testes funcionais da LibsensorPy. Esses testes foram realizados à medida que o sistema estava sendo implementado.

Em seguida, foi dada continuação ao estudo com testes de validação. Esses testes foram realizados após a finalização do desenvolvimento da LibsensorPy, e baseou-se na disponibilização da biblioteca à um estudante da pós graduação envolvida em atividades de desenvolvimento de sistemas ubíquos. O objetivo principal foi verificar se a LibsensorPy atende as necessidades dos usuários.

===================================================Pagina ===================================================
Resultado do Estudo de Caso

O resultado obtido do estudo de caso foi satisfatório. Os sensores testados funcionaram de maneira esperada e os dados informados foram coerentes ao ambiente. 
Segundo o usuário: "A biblioteca, além de fácil instalação, diminui o tempo gasto em desenvolvimento de aplicações que necessitam sensores e reduz a quantidade de códigos repetidos."

Sugestões recolhidas durante o estudo de caso:
# Adicionar mais exemplos de uso;

===================================================Pagina ===================================================
Conclusões

Este trabalho apresenta uma biblioteca extensível open source, disponível via Python Package Index(PyPI) e Github, para facilitar a criação de sistemas ubíquos.
A ferramenta foi projetada de maneira que facilitasse a inclusão de novos sensores, famílias e fábricas de sensores, bem como a fácil utilização do usuário, abstraindo comportamentos técnicos e específicos desse tipo de sistema e utilizando padrões de projeto e seguindo os princípios SOLID.



===================================================Pagina ===================================================
Trabalhos Futuros

# Testar os sensores que foram implementados mas não foram testados;
# Adicionar novos sensores à biblioteca;
# Adicionar mais exemplos de uso;

===================================================Pagina ===================================================
Referencias:



[1] Adafruit. Configuring i2c. https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c, note = "[Online; accessed 15-March-2015]", September 2014.
[2] J. A. Armstrong, P. A. Ferguson, M. K. Gaillard, M. Greenwood, S. V. Jaskolski, A. K. Jones, G. M. Langford, J. Lubchenco, E. L. Menger, J. A. Miller Jr, et al. National science foundation. 2001.
[3] M. Barr. Pulse width modulation. Embedded Systems Programming, 14(10):103–104, 2001.
[4] L. P. Borges and R. de Carvalho Dores. Automação predial sem fio utilizando bacnet/zigbee com foco em economia de energia. Trabalho de Graduação em Engenharia de Controle e Automação, Publicação FT. TG, (06), 2010.
[5] Broadcom. Bcm2835 media processor. http://www.broadcom.com/products/BCM2835, September 2012. [Online; accessed 06-May-2014].
[6] M. Brose. Broadcom bcm2835 soc has the most powerful mobile gpu in the world? http://www.grandmax.net/2012/01/broadcom-bcm2835-soc-has-powerful.html, January 2012. [Online; accessed 13-March-2015].
[7] A. d. L. Carvalho, F. d. Ponce de Leon, et al. Grandes desafios da pesquisa em computação no brasil–2006–2016. São Paulo: Sociedade Brasileira de Computação, 2006.
[8] G. Coley. Take advantage of open-source hardware. EDN, 54(16):20–23, 2009.
[9] K. Dallas. Windows 10 coming to raspberry pi 2. building apps for windows. http://blogs.windows.com/buildingapps/2015/02/02/windows-10-coming-to-raspberry-pi-2/, note = "[Online; accessed 25-March-2015]", February 2014.
[10] C. C. J. L. Damien Cassou, Émile Balland. Architecture-driven-programming for sense/compute/control applications. http://pt.slideshare.net/DamienCassou/architecturedriven-programming-for-sensecompute/control-applications, note = "[Online; accessed 19-March-2015]", May 2010.
[11] M. A. P. A. Daniel Pace Schmitz. Utilização dos princípios solid na aplicação de padrões de projeto. Revista Engenharia de Software Magazine 50, 2006.
[12] R. B. de Araujo. Computação ubíqua: Princípios, tecnologias e desafios. In XXI Simpósio Brasileiro de Redes de Computadores, volume 8, pages 11–13, 2003.
[13] J. J. I. de Souza, L. B. P. do Nascimento, and P. R. dos Santos Filho. Arduino e python: Do it yourself.
[14] A. K. Dennis. Raspberry Pi Home Automation with Arduino. Packt Publishing Ltd, 2013.
[15] O. S. DOESn’t FIt All. "innovations in ubicomp products.". 2013.
[16] G. Edwards, J. Garcia, H. Tajalli, D. Popescu, N. Medvidovic, G. Sukhatme, and B. Petrus. Architecture-driven self-adaptation and self-management in robotics systems. In Software Engineering for Adaptive and Self-Managing Systems, 2009. SEAMS’09. ICSE Workshop on, pages 142–151. IEEE, 2009.
[17] Elinux.org. Verified usb peripherals and sdhc cards;. http://elinux.org/RPi_VerifiedPeripherals, May 2012. [Online; accessed 13-March-2015].
[18] R. P. FOUNDATION. What is a raspberry pi?,.2014a. http://www.raspberrypi.org/help/what-is-a-raspberry-pi/, October 2014. [Online; accessed 04 October-2014].
[19] Gadgetoid. Pinout: Uart.http://pi.gadgetoid.com/pinout/uart, note = "[Online; accessed 15-March-2015]", July 2014.
[20] G. Halfacree. Raspberry pi review: Eben upton reveals all. http://www.linuxuser.co.uk/features/raspberry-pi-interview-eban-upton-reveals-all, note = "[Online; accessed 25-February-2015]", 2014.
[21] O. Henrique B. Filho. Componentes eletronicos e unidades de medida, conceitos basicos, 2012.
[22] D. Industries. A fork of raspbian for robotics projects with lego, grove, and arduino. http://sourceforge.net/projects/dexterindustriesraspbianflavor/, note = "[Online; accessed 25-March-2015]", June 2013.
[23] Jaguar.orpheusweb.co.uk. Brandy basic. http://jaguar.orpheusweb.co.uk/branpage.html, July 2005. [Online; accessed 13-March-2015].
[24] H. Kopetz. Real-Time Systems: Design Principles for Distributed Embedded Applications. Kluwer Academic Publishers, Norwell, MA, USA, 1st edition, 1997.
[25] K. Krishnakumar, J. Gubbi, and R. Buyya. A framework for iot sensor data analytics and visualisation in cloud computing environments.
[26] J. Krumm. Ubiquitous computing fundamentals. CRC Press, 2009.
[27] M. C. M. Neto. Desenvolvimento de aplicações ubíquas com arduino e raspbery pi.
[28] Oracle. Concurrency in java. http://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html, note = "[Online; accessed 11-January-2015]".
[29] W. PI. Wiring pi - gpio interface library for the raspberry pi – about. http://wiringpi.com/, October 2014. [Online; accessed 02-October-2014].
[30] Pibanglinux.org. Inspired by crunchbang linux, and based on raspbian. features the openbox desktop environment. http://www.pibanglinux.org/, note = "[Online; accessed 25-March-2015]", May 2013.
[31] Pigpio. Pigpio, a python module for the raspberry which talks to the pigpio daemon to allow control of the general purpose input outputs. http://abyz.co.uk/rpi/pigpio/python.html, note = "[Online; accessed 25-March-2015]", February 2015.
[32] Privateeyepi.com. A home automation and monitoring project for raspberry pi, March 2015.
[33] Raspberrypi-spy.co.uk. Simple guide to the rpi-gpio header and pins. http://www.raspberrypi-spy.co.uk/2012/06/simple-guide-to-the-rpi-gpio-header-and-pins/, note = "[Online; accessed 25-March-2015]", June 2012.
[34] Raspberrypi.org. Model b now ships with 512mb of ram. http://www.raspberrypi.org/model-b-now-ships-with-512mb-of-ram/, October 2012. [Online; accessed 13-March-2015].
[35] Raspberrypi.org. Raspberry-pi compute module new product. http://www.raspberrypi.org/raspberry-pi-compute-module-new-product/, May 2012. [Online; accessed 13-March-2015].
[36] Raspberrypi.org. Raspbian wheezy. http://www.raspberrypi.org/downloads, note = "[Online; accessed 25-March-2015]", January 2013.
[37] Raspberrypi.org. Raspberri pi spi. http://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md, note = "[Online; accessed 15-March-2015]", July 2014.
[38] b. RASPBERY PI FUNDATION. About us. 2014b. http://www.raspberrypi.org/about/, October 2014. [Online; accessed 01-October-2014].
[39] c. RASPBERY PI FUNDATION. Faqs. 2014c. http://www.raspberrypi.org/help/faqs/, October 2014. [Online; accessed 01-October-2014].
[40] Raspberypi.org. Gpio usage. https://www.raspberrypi.org/documentation/usage/gpio/README.md, July 2014. [Online; accessed 15-March-2015].
[41] Raspbian. Introducing the pi store. http://www.raspberrypi.org/introducing-the-pi-store/, note = "[Online; accessed 25-March-2015]", September
2014.
[42] Raspbian. Raspbian – debian optimized for the raspberry pi hardware. http://www.raspbian.org/, note = "[Online; accessed 25-March-2015]", September 2014.
[43] R. N. Taylor, N. Medvidovic, and E. M. Dashofy. Software architecture: foundations, theory, and practice. Wiley Publishing, 2009.
[44] B. Trapp. Raspberry pi: The perfect home server. linux j. São Paulo: Sociedade Brasileira de Computação, May 2013. 
[45] E. Upton. Wayland. http://www.raspberrypi.org/archives/4053, note = "[Online; accessed 25-March-2015]", May 2013.
[46] M. Weiser. The computer for the 21st century. Scientific american, 265(3):94–104, 1991.
[47] M. Weiser. The world is not a desktop. interactions, 1(1):7–8, 1994.
[48] M. Weiser and J. S. Brown. The coming age of calm technology. In Beyond calculation, pages 75–85. Springer, 1997.
[49] M. Wirth and J. McCuaig. Making programs with the raspberry pi. In Proceedings of the Western Canadian Conference on Computing Education, page 17. ACM, 2014.
[50] L. Yau. Raspbian server edition version 2.4. the rantings and ravings of a madman. http://sirlagz.net/2013/06/13/raspbian-server-edition-2-4/, note = "[Online; accessed 25-March-2015]", July 2013.




























===================================================Pagina ===================================================
